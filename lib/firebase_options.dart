// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['WEB_API_KEY'].toString(),
    appId: dotenv.env['WEB_APP_ID'].toString(),
    messagingSenderId: dotenv.env['WEB_MESSAGING_SENDER_ID'].toString(),
    projectId: dotenv.env['WEB_PROJECT_ID'].toString(),
    authDomain: dotenv.env['WEB_AUTH_DOMAIN'].toString(),
    storageBucket: dotenv.env['WEB_STORAGE_BUCKET'].toString(),
    measurementId: dotenv.env['WEB_MEASUREMENT_ID'].toString(),
  );

  FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['ANDROID_API_KEY'].toString(),
    appId: dotenv.env['ANDROID_APP_ID'].toString(),
    messagingSenderId: dotenv.env['ANDROID_MESSAGING_SENDER_ID'].toString(),
    projectId: dotenv.env['ANDROID_PROJECT_ID'].toString(),
    storageBucket: dotenv.env['ANDROID_STORAGE_BUCKET'].toString(),
  );

  FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['IOS_API_KEY'].toString(),
    appId: dotenv.env['IOS_APP_ID'].toString(),
    messagingSenderId: dotenv.env['IOS_MESSAGING_SENDER_ID'].toString(),
    projectId: dotenv.env['IOS_PROJECT_ID'].toString(),
    storageBucket: dotenv.env['IOS_STORAGE_BUCKET'].toString(),
    androidClientId: dotenv.env['IOS_ANDROID_CLIENT_ID'].toString(),
    iosClientId: dotenv.env['IOS_IOS_CLIENT_ID'].toString(),
    iosBundleId: dotenv.env['IOS_BUNDLE_ID'].toString(),
  );

  FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['MACOS_API_KEY'].toString(),
    appId: dotenv.env['MACOS_APP_ID'].toString(),
    messagingSenderId: dotenv.env['MACOS_MESSAGING_SENDER_ID'].toString(),
    projectId: dotenv.env['MACOS_PROJECTID'].toString(),
    storageBucket: dotenv.env['MACOS_STORAGE_BUCKET'].toString(),
    androidClientId: dotenv.env['MACOS_ANDROID_CLIENT_ID'].toString(),
    iosClientId: dotenv.env['MACOS_IOS_CLIENT_ID'].toString(),
    iosBundleId: dotenv.env['MACOS_IOS_BUNDLE_ID'].toString(),
  );
}
